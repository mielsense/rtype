#!/usr/bin/env -S guile -s
!#

(use-modules (srfi srfi-1)
	     (srfi srfi-9)
	     (ice-9 textual-ports)
	     (ice-9 format))

(define-record-type <packet>
  (make-packet name id headers variables)
  packet?
  (name packet-name)
  (id packet-id)
  (headers packet-headers)
  (variables packet-variables))

(define (packet-classname packet)
  (string-append (packet-name packet) "Packet"))

(define (format-variables variables)
  (fold
   (lambda (variable previous)
     (string-append previous "\t\t" (car variable) " " (cdr variable) ";\n"))
   ""
   variables))

(define (format-constructor-args variables)
  (fold
   (lambda (variable previous)
     (string-append
      previous
      (if (string= previous "") ""
	  ", ")
      (car variable)
      " "
      (cdr variable)
      ))
   ""
   variables))

(define (make-packet-header packet)
  (let ((classname (packet-classname packet)))
    (format #t
	    "// This file was auto-generated by generate-packets.scm, do not modify it manually.
#pragma once

#include \"network/APacket.hpp\"
#include \"network/Types.hpp\"
~a
namespace tetriq {
	class ~a : public APacket {
	public:
		~a(~a);
		~a(NetworkIStream &is);

		PacketId getId() const override;
		size_t getNetworkSize() const override;
		// variables
~a
	protected:
		NetworkOStream &write(NetworkOStream &os) const override;
		NetworkIStream &read(NetworkIStream &is) override;
	};
}
"
	    (or (packet-headers packet) "")
	    classname
	    classname
	    (format-constructor-args (packet-variables packet))
	    classname
	    (format-variables (packet-variables packet)))))

(define (format-istream-constructor variables prefix)
  (cond
   ((null? variables) "")
   (else
    (string-append "\t"
		   prefix
		   (cdr (car variables))
		   "(is.read<"
		   (car (car variables))
		   ">())\n"
		   (format-istream-constructor (cdr variables) ",")))))

(define (format-full-constructor variables prefix)
  (cond
   ((null? variables) "")
   (else
    (string-append "\t"
		   prefix
		   (cdr (car variables))
		   "("
		   (cdr (car variables))
		   ")\n"
		   (format-full-constructor (cdr variables) ",")))))


(define (format-network-size variables)
  (fold
   (lambda (variable previous)
     (string-append previous " + NetworkObject::getNetworkSize(" (cdr variable) ")"))
   "0"
   variables))

(define (format-stream operator variables)
  (fold
   (lambda (variable previous)
     (string-append previous " " operator " " (cdr variable)))
   "stream"
   variables))

(define (make-packet-source packet)
  (let ((classname (packet-classname packet)))
    (display "// This file was auto-generated by generate-packets.scm, do not modify it manually.\n")
    (format #t "#include \"network/packets/~a.hpp\"\n" classname)
    (display "namespace tetriq {\n")

    (format #t "~a::~a(~a)\n" classname classname (format-constructor-args (packet-variables packet)))
    (display (format-full-constructor (packet-variables packet) ":"))
    (display "{}\n")

    (format #t "~a::~a(NetworkIStream &is)\n" classname classname)
    (display (format-istream-constructor (packet-variables packet) ":"))
    (display "{}\n")

    (format #t "size_t ~a::getNetworkSize() const {\n" classname)
    (format #t "\treturn ~a;\n" (format-network-size (packet-variables packet)))
    (display "}\n")

    (format #t "NetworkOStream &~a::write(NetworkOStream &stream) const {\n" classname)
    (format #t "\treturn ~a;\n" (format-stream "<<" (packet-variables packet)))
    (display "}\n")

    (format #t "NetworkIStream &~a::read(NetworkIStream &stream) {\n" classname)
    (format #t "\treturn ~a;\n" (format-stream ">>" (packet-variables packet)))
    (display "}\n")

    (format #t "PacketId ~a::getId() const {\n" classname)
    (format #t "\treturn PacketId::~a;\n" (packet-id packet))
    (display "}\n")

    (display "}\n")))

(define (open-empty-file path)
  (open path (logior O_WRONLY O_CREAT O_TRUNC)))

(define (make-packet-files packet root)
  (let* ((header-path (string-append root
				     "/include/network/packets/"
				     (packet-classname packet)
				     ".hpp"))
	 (header-file (open-empty-file header-path))
	 (source-path (string-append root
				     "/src/packets/"
				     (packet-classname packet)
				     ".cpp"))
	 (source-file (open-empty-file source-path)))
    (with-output-to-port header-file
      (lambda ()
	(make-packet-header packet)))
    (close header-file)
    (with-output-to-port source-file
      (lambda ()
	(make-packet-source packet)))
    (close source-file)))

(define (make-packet-id-list packets root)
  (let ((ids (map packet-id packets))
	(file (open-empty-file (string-append root "/include/network/generated/packet-id-list"))))
    (format file "~{~a,\n~}" ids)
    (close file)))

(define %packets
  (list
   (make-packet
    "Ping"
    "PING"
    #nil
    '(("time_t" . "time")))
;;; Game packets from client
   (make-packet
    "ConnectionRequest"
    "CONNECTION_REQUEST"
    #nil
    '(("std::string" . "player_name")
      ("std::array<char, 3>" . "color")
      ("uint64_t" . "protocol_version")))
   (make-packet
    "MovementAction"
    "MOVEMENT_ACTION"
    #nil
    '(("Position" . "new_pos")))
   (make-packet
    "ShootAction"
    "SHOOT_ACTION"
    #nil
    '(("Position" . "origin")))
   (make-packet
    "SpecialAbilityAction"
    "SPECIAL_ABILITY_ACTION"
    #nil
    '(("uint8_t" . "ability")
      ("Position" . "position")))
;;; Game packets from server
   (make-packet
    "ConnectionReply"
    "CONNECTION_REPLY"
    #nil
    '(("bool" . "connection_validated")))
   (make-packet
    "FullSynchronisation"
    "FULL_SYNCHRONISATION"
    #nil
    '(("uint64_t" . "player_id")
      ("Position" . "player_position")))
   (make-packet
    "EntityMovement"
    "ENTITY_MOVEMENT"
    #nil
    '(("uint64_t" . "entity_id")
      ("Position" . "position")))
   (make-packet
    "NewPlayer"
    "NEW_PLAYER"
    #nil
    '(("uint64_t" . "id")
      ("Position" . "position")))
   (make-packet
    "NewEnemy"
    "NEW_ENEMY"
    #nil
    '(("uint64_t" . "id")
      ("Position" . "position")
      ("Velocity" . "velocity")
      ("uint64_t" . "type")))
   (make-packet
    "NewShoot"
    "NEW_SHOOT"
    #nil
    '(("uint64_t" . "id")
      ("Position" . "position")
      ("Velocity" . "velocity")))
   (make-packet
    "SetHealth"
    "SET_HEALTH"
    #nil
    '(("double" . "health")
      ("double" . "max_health")))
   (make-packet
    "DestroyEntity"
    "DESTROY_ENTITY"
    #nil
    '(("uint64_t" . "id")))
   (make-packet
    "SetScore"
    "SET_SCORE"
    #nil
    '(("uint64_t" . "score")))
;;; Master server/client
   (make-packet
    "QueryRequest"
    "S_QUERY_REQUEST"
    #nil
    '())
   (make-packet
    "QueryResponse"
    "C_QUERY_RESPONSE"
    #nil
    '(("uint64_t" . "player_count")
      ("uint64_t" . "max_players")
      ("uint16_t" . "tick_rate")
      ("std::string" . "server_name")
      ("uint64_t" . "current_level")
      ("std::string" . "server_ip")
      ("uint16_t" . "server_port")))
   (make-packet
     "ServerListRequest"
     "C_SERVER_LIST_REQUEST"
     #nil
     '())
    (make-packet
      "ServerListResponse"
      "S_SERVER_LIST_RESPONSE"
      #nil
      '(("std::vector<ServerInfo>" . "servers")))
   (make-packet
     "StartGame"
     "S_START_GAME"
     #nil
     '())
   (make-packet
     "PlayerName"
     "PLAYER_NAME"
     #nil
     '(("std::string" . "player_name")
        ("uint64_t" . "player_id")))))
     '())
   (make-packet
     "EndGame"
     "END_GAME"
     #nil
     '())))

(define (main)
  (cond
   ((null? (cdr (program-arguments)))
    (display "Usage: generate-packets.scm <root-path>")
    (newline))
   (else
    (let ((root (car (cdr (program-arguments)))))
      (for-each
       (lambda (packet)
	 (format #t
		 "Creating files for ~a\n"
		 (packet-name packet))
	 (make-packet-files packet root))
       %packets)
      (display "Creating PacketId list\n")
      (make-packet-id-list %packets root)
      (display "Done!\n")
      (display "Don't forget to add the new packets to the PacketHandler and APacket!\n")))))

(main)

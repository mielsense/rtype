// This file was auto-generated by generate-packets.scm, do not modify it manually.
#include "network/packets/QueryResponsePacket.hpp"
namespace tetriq {
QueryResponsePacket::QueryResponsePacket(uint64_t player_count, uint64_t max_players, uint16_t tick_rate, std::string server_name, uint64_t current_level, std::string server_ip, uint16_t server_port)
	:player_count(player_count)
	,max_players(max_players)
	,tick_rate(tick_rate)
	,server_name(server_name)
	,current_level(current_level)
	,server_ip(server_ip)
	,server_port(server_port)
{}
QueryResponsePacket::QueryResponsePacket(NetworkIStream &is)
	:player_count(is.read<uint64_t>())
	,max_players(is.read<uint64_t>())
	,tick_rate(is.read<uint16_t>())
	,server_name(is.read<std::string>())
	,current_level(is.read<uint64_t>())
	,server_ip(is.read<std::string>())
	,server_port(is.read<uint16_t>())
{}
size_t QueryResponsePacket::getNetworkSize() const {
	return 0 + NetworkObject::getNetworkSize(player_count) + NetworkObject::getNetworkSize(max_players) + NetworkObject::getNetworkSize(tick_rate) + NetworkObject::getNetworkSize(server_name) + NetworkObject::getNetworkSize(current_level) + NetworkObject::getNetworkSize(server_ip) + NetworkObject::getNetworkSize(server_port);
}
NetworkOStream &QueryResponsePacket::write(NetworkOStream &stream) const {
	return stream << player_count << max_players << tick_rate << server_name << current_level << server_ip << server_port;
}
NetworkIStream &QueryResponsePacket::read(NetworkIStream &stream) {
	return stream >> player_count >> max_players >> tick_rate >> server_name >> current_level >> server_ip >> server_port;
}
PacketId QueryResponsePacket::getId() const {
	return PacketId::C_QUERY_RESPONSE;
}
}
